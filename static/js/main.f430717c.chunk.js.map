{"version":3,"sources":["components/TasksList.js","App.js","serviceWorker.js","index.js"],"names":["TasksList","_this","this","list","props","tasksList","map","task","_React$createElement","react_default","a","createElement","key","toString","className","Checkbox","value","color","Object","defineProperty","dropTask","DeleteForever_default","React","Component","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","tasks","e","preventDefault","isEmpty","includes","setState","concat","splice","indexOf","_this2","onSubmit","addTask","type","name","placeholder","onChange","target","components_TasksList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPA6BeA,mLAvBF,IAAAC,EAAAC,KACDC,EAAOD,KAAKE,MAAMC,UAAUC,IAAI,SAAAC,GAAI,IAAAC,EAAA,OACpCC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAKM,WAAYC,UAAU,QACjCL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACXL,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACXL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAUC,MAAM,WAAWC,MAAM,YACjCR,EAAAC,EAAAC,cAAA,UAAAH,EAAA,CAAQM,UAAU,QAAlBI,OAAAC,EAAA,EAAAD,CAAAV,EAAA,YAAmC,aAAnCU,OAAAC,EAAA,EAAAD,CAAAV,EAAA,UAAwD,kBAAMP,EAAKG,MAAMgB,SAASb,KAAlFC,GACIC,EAAAC,EAAAC,cAACU,EAAAX,EAAD,YAOpB,OACID,EAAAC,EAAAC,cAAA,OAAKG,UAAU,yCACVX,UAlBOmB,IAAMC,WC4CfC,cA1Cb,SAAAA,EAAYpB,GAAO,IAAAH,EAAA,OAAAiB,OAAAO,EAAA,EAAAP,CAAAhB,KAAAsB,IACjBvB,EAAAiB,OAAAQ,EAAA,EAAAR,CAAAhB,KAAAgB,OAAAS,EAAA,EAAAT,CAAAM,GAAAI,KAAA1B,KAAME,KACDyB,MAAQ,CACXtB,KAAM,GACNuB,MAAO,IAJQ7B,uEAQX8B,GACNA,EAAEC,iBADO,IAEDzB,EAASL,KAAK2B,MAAdtB,KACAuB,EAAU5B,KAAK2B,MAAfC,MACJG,IAAQ1B,IAAUuB,EAAMI,SAAS3B,IACnCL,KAAKiC,SAAS,CAAE5B,KAAM,GAAIuB,MAAOA,EAAMM,OAAO7B,sCAIzCA,GAAM,IACLuB,EAAU5B,KAAK2B,MAAfC,MACRA,EAAMO,OAAOP,EAAMQ,QAAQ/B,GAAO,GAClCL,KAAKiC,SAAS,CACZ5B,KAAM,GACNuB,2CAIK,IAAAS,EAAArC,KACP,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,WAAW0B,SAAU,SAAAT,GAAC,OAAIQ,EAAKE,QAAQV,KACrDtB,EAAAC,EAAAC,cAAA,SAAO+B,KAAK,OAAOC,KAAK,OAAO7B,UAAU,aAAa8B,YAAY,8FAAmB5B,MAAOd,KAAK2B,MAAMtB,KAAMsC,SAAU,SAAAd,GAAC,OAAIQ,EAAKJ,SAAS,CAAE5B,KAAMwB,EAAEe,OAAO9B,OAAS,QACpKP,EAAAC,EAAAC,cAAA,UAAQG,UAAU,UAAlB,QAEFL,EAAAC,EAAAC,cAACoC,EAAD,CAAW1C,UAAWH,KAAK2B,MAAMC,MAAOV,SAAU,SAAAb,GAAI,OAAIgC,EAAKnB,SAASb,eApChEe,IAAMC,kBCOJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAAUC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f430717c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\n\r\nclass TasksList extends React.Component {\r\n    render() {\r\n        let list = this.props.tasksList.map(task =>\r\n            <div key={task.toString()} className=\"task\">\r\n                <div className=\"taskArea\">\r\n                    <h3>{task}</h3>\r\n                    <div className=\"buttons\">\r\n                        <Checkbox value=\"checkedA\" color=\"primary\" />\r\n                        <button className=\"drop\" className=\"removeBtn\" onClick={() => this.props.dropTask(task)}>\r\n                            <DeleteForeverIcon />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        );\r\n\r\n        return (\r\n            <div className=\"list row justify-content-space-around\">\r\n                {list}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TasksList;\r\n","import React from 'react';\nimport './App.css';\nimport isEmpty from 'lodash/isEmpty'\nimport TasksList from \"./components/TasksList\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      task: '',\n      tasks: []\n    };\n  }\n\n  addTask(e) {\n    e.preventDefault();\n    const { task } = this.state;\n    const { tasks } = this.state;\n    if(!isEmpty(task) && !tasks.includes(task)) {\n      this.setState({ task: '', tasks: tasks.concat(task) })\n    }\n  }\n\n  dropTask(task) {\n    const { tasks } = this.state;\n    tasks.splice(tasks.indexOf(task), 1);\n    this.setState({\n      task: '',\n      tasks\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"mainArea\">\n          <form className=\"textArea\" onSubmit={e => this.addTask(e)}>\n            <input type=\"text\" name=\"task\" className=\"text-input\" placeholder=\"Добавить задание\" value={this.state.task} onChange={e => this.setState({ task: e.target.value || '' })} />\n            <button className=\"addBtn\">Add</button>\n          </form>\n          <TasksList tasksList={this.state.tasks} dropTask={task => this.dropTask(task)} />\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}